// Code generated by SQLBoiler 4.2.0 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
)

// Jet is an object representing the database table.
type Jet struct {
	ID         int         `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PilotID    int         `db:"pilot_id" boil:"pilot_id" json:"pilot_id" toml:"pilot_id" yaml:"pilot_id"`
	AirportID  int         `db:"airport_id" boil:"airport_id" json:"airport_id" toml:"airport_id" yaml:"airport_id"`
	Name       string      `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Color      null.String `db:"color" boil:"color" json:"color,omitempty" toml:"color" yaml:"color,omitempty"`
	UUID       string      `db:"uuid" boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	Identifier string      `db:"identifier" boil:"identifier" json:"identifier" toml:"identifier" yaml:"identifier"`
	Cargo      []byte      `db:"cargo" boil:"cargo" json:"cargo" toml:"cargo" yaml:"cargo"`
	Manifest   []byte      `db:"manifest" boil:"manifest" json:"manifest" toml:"manifest" yaml:"manifest"`

	R *jetR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L jetL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JetColumns = struct {
	ID         string
	PilotID    string
	AirportID  string
	Name       string
	Color      string
	UUID       string
	Identifier string
	Cargo      string
	Manifest   string
}{
	ID:         "id",
	PilotID:    "pilot_id",
	AirportID:  "airport_id",
	Name:       "name",
	Color:      "color",
	UUID:       "uuid",
	Identifier: "identifier",
	Cargo:      "cargo",
	Manifest:   "manifest",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var JetWhere = struct {
	ID         whereHelperint
	PilotID    whereHelperint
	AirportID  whereHelperint
	Name       whereHelperstring
	Color      whereHelpernull_String
	UUID       whereHelperstring
	Identifier whereHelperstring
	Cargo      whereHelper__byte
	Manifest   whereHelper__byte
}{
	ID:         whereHelperint{field: "\"jets\".\"id\""},
	PilotID:    whereHelperint{field: "\"jets\".\"pilot_id\""},
	AirportID:  whereHelperint{field: "\"jets\".\"airport_id\""},
	Name:       whereHelperstring{field: "\"jets\".\"name\""},
	Color:      whereHelpernull_String{field: "\"jets\".\"color\""},
	UUID:       whereHelperstring{field: "\"jets\".\"uuid\""},
	Identifier: whereHelperstring{field: "\"jets\".\"identifier\""},
	Cargo:      whereHelper__byte{field: "\"jets\".\"cargo\""},
	Manifest:   whereHelper__byte{field: "\"jets\".\"manifest\""},
}

// JetRels is where relationship names are stored.
var JetRels = struct {
	Airport string
	Pilot   string
}{
	Airport: "Airport",
	Pilot:   "Pilot",
}

// jetR is where relationships are stored.
type jetR struct {
	Airport *Airport `db:"Airport" boil:"Airport" json:"Airport" toml:"Airport" yaml:"Airport"`
	Pilot   *Pilot   `db:"Pilot" boil:"Pilot" json:"Pilot" toml:"Pilot" yaml:"Pilot"`
}

// NewStruct creates a new relationship struct
func (*jetR) NewStruct() *jetR {
	return &jetR{}
}

// jetL is where Load methods for each relationship are stored.
type jetL struct{}

var (
	jetAllColumns            = []string{"id", "pilot_id", "airport_id", "name", "color", "uuid", "identifier", "cargo", "manifest"}
	jetColumnsWithoutDefault = []string{"pilot_id", "airport_id", "name", "color", "uuid", "identifier", "cargo", "manifest"}
	jetColumnsWithDefault    = []string{"id"}
	jetPrimaryKeyColumns     = []string{"id"}
)

type (
	// JetSlice is an alias for a slice of pointers to Jet.
	// This should generally be used opposed to []Jet.
	JetSlice []*Jet
	// JetHook is the signature for custom Jet hook methods
	JetHook func(context.Context, boil.ContextExecutor, *Jet) error

	jetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jetType                 = reflect.TypeOf(&Jet{})
	jetMapping              = queries.MakeStructMapping(jetType)
	jetPrimaryKeyMapping, _ = queries.BindMapping(jetType, jetMapping, jetPrimaryKeyColumns)
	jetInsertCacheMut       sync.RWMutex
	jetInsertCache          = make(map[string]insertCache)
	jetUpdateCacheMut       sync.RWMutex
	jetUpdateCache          = make(map[string]updateCache)
	jetUpsertCacheMut       sync.RWMutex
	jetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jetBeforeInsertHooks []JetHook
var jetBeforeUpdateHooks []JetHook
var jetBeforeDeleteHooks []JetHook
var jetBeforeUpsertHooks []JetHook

var jetAfterInsertHooks []JetHook
var jetAfterSelectHooks []JetHook
var jetAfterUpdateHooks []JetHook
var jetAfterDeleteHooks []JetHook
var jetAfterUpsertHooks []JetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Jet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Jet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Jet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Jet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Jet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Jet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Jet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Jet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Jet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJetHook registers your hook function for all future operations.
func AddJetHook(hookPoint boil.HookPoint, jetHook JetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		jetBeforeInsertHooks = append(jetBeforeInsertHooks, jetHook)
	case boil.BeforeUpdateHook:
		jetBeforeUpdateHooks = append(jetBeforeUpdateHooks, jetHook)
	case boil.BeforeDeleteHook:
		jetBeforeDeleteHooks = append(jetBeforeDeleteHooks, jetHook)
	case boil.BeforeUpsertHook:
		jetBeforeUpsertHooks = append(jetBeforeUpsertHooks, jetHook)
	case boil.AfterInsertHook:
		jetAfterInsertHooks = append(jetAfterInsertHooks, jetHook)
	case boil.AfterSelectHook:
		jetAfterSelectHooks = append(jetAfterSelectHooks, jetHook)
	case boil.AfterUpdateHook:
		jetAfterUpdateHooks = append(jetAfterUpdateHooks, jetHook)
	case boil.AfterDeleteHook:
		jetAfterDeleteHooks = append(jetAfterDeleteHooks, jetHook)
	case boil.AfterUpsertHook:
		jetAfterUpsertHooks = append(jetAfterUpsertHooks, jetHook)
	}
}

// One returns a single jet record from the query.
func (q jetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Jet, error) {
	o := &Jet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for jets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Jet records from the query.
func (q jetQuery) All(ctx context.Context, exec boil.ContextExecutor) (JetSlice, error) {
	var o []*Jet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Jet slice")
	}

	if len(jetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Jet records in the query.
func (q jetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count jets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if jets exists")
	}

	return count > 0, nil
}

// Airport pointed to by the foreign key.
func (o *Jet) Airport(mods ...qm.QueryMod) airportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AirportID),
	}

	queryMods = append(queryMods, mods...)

	query := Airports(queryMods...)
	queries.SetFrom(query.Query, "\"airports\"")

	return query
}

// Pilot pointed to by the foreign key.
func (o *Jet) Pilot(mods ...qm.QueryMod) pilotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PilotID),
	}

	queryMods = append(queryMods, mods...)

	query := Pilots(queryMods...)
	queries.SetFrom(query.Query, "\"pilots\"")

	return query
}

// LoadAirport allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jetL) LoadAirport(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJet interface{}, mods queries.Applicator) error {
	var slice []*Jet
	var object *Jet

	if singular {
		object = maybeJet.(*Jet)
	} else {
		slice = *maybeJet.(*[]*Jet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jetR{}
		}
		args = append(args, object.AirportID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jetR{}
			}

			for _, a := range args {
				if a == obj.AirportID {
					continue Outer
				}
			}

			args = append(args, obj.AirportID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`airports`),
		qm.WhereIn(`airports.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Airport")
	}

	var resultSlice []*Airport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Airport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for airports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for airports")
	}

	if len(jetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Airport = foreign
		if foreign.R == nil {
			foreign.R = &airportR{}
		}
		foreign.R.Jets = append(foreign.R.Jets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AirportID == foreign.ID {
				local.R.Airport = foreign
				if foreign.R == nil {
					foreign.R = &airportR{}
				}
				foreign.R.Jets = append(foreign.R.Jets, local)
				break
			}
		}
	}

	return nil
}

// LoadPilot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jetL) LoadPilot(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJet interface{}, mods queries.Applicator) error {
	var slice []*Jet
	var object *Jet

	if singular {
		object = maybeJet.(*Jet)
	} else {
		slice = *maybeJet.(*[]*Jet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jetR{}
		}
		args = append(args, object.PilotID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jetR{}
			}

			for _, a := range args {
				if a == obj.PilotID {
					continue Outer
				}
			}

			args = append(args, obj.PilotID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pilots`),
		qm.WhereIn(`pilots.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pilot")
	}

	var resultSlice []*Pilot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pilot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pilots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pilots")
	}

	if len(jetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pilot = foreign
		if foreign.R == nil {
			foreign.R = &pilotR{}
		}
		foreign.R.Jets = append(foreign.R.Jets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PilotID == foreign.ID {
				local.R.Pilot = foreign
				if foreign.R == nil {
					foreign.R = &pilotR{}
				}
				foreign.R.Jets = append(foreign.R.Jets, local)
				break
			}
		}
	}

	return nil
}

// SetAirport of the jet to the related item.
// Sets o.R.Airport to related.
// Adds o to related.R.Jets.
func (o *Jet) SetAirport(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Airport) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"jets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"airport_id"}),
		strmangle.WhereClause("\"", "\"", 2, jetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AirportID = related.ID
	if o.R == nil {
		o.R = &jetR{
			Airport: related,
		}
	} else {
		o.R.Airport = related
	}

	if related.R == nil {
		related.R = &airportR{
			Jets: JetSlice{o},
		}
	} else {
		related.R.Jets = append(related.R.Jets, o)
	}

	return nil
}

// SetPilot of the jet to the related item.
// Sets o.R.Pilot to related.
// Adds o to related.R.Jets.
func (o *Jet) SetPilot(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pilot) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"jets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pilot_id"}),
		strmangle.WhereClause("\"", "\"", 2, jetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PilotID = related.ID
	if o.R == nil {
		o.R = &jetR{
			Pilot: related,
		}
	} else {
		o.R.Pilot = related
	}

	if related.R == nil {
		related.R = &pilotR{
			Jets: JetSlice{o},
		}
	} else {
		related.R.Jets = append(related.R.Jets, o)
	}

	return nil
}

// Jets retrieves all the records using an executor.
func Jets(mods ...qm.QueryMod) jetQuery {
	mods = append(mods, qm.From("\"jets\""))
	return jetQuery{NewQuery(mods...)}
}

// FindJet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Jet, error) {
	jetObj := &Jet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"jets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from jets")
	}

	return jetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Jet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no jets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jetInsertCacheMut.RLock()
	cache, cached := jetInsertCache[key]
	jetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jetAllColumns,
			jetColumnsWithDefault,
			jetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jetType, jetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jetType, jetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"jets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"jets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into jets")
	}

	if !cached {
		jetInsertCacheMut.Lock()
		jetInsertCache[key] = cache
		jetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Jet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Jet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jetUpdateCacheMut.RLock()
	cache, cached := jetUpdateCache[key]
	jetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jetAllColumns,
			jetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update jets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"jets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jetType, jetMapping, append(wl, jetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update jets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for jets")
	}

	if !cached {
		jetUpdateCacheMut.Lock()
		jetUpdateCache[key] = cache
		jetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q jetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for jets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for jets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"jets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in jet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all jet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Jet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no jets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jetUpsertCacheMut.RLock()
	cache, cached := jetUpsertCache[key]
	jetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jetAllColumns,
			jetColumnsWithDefault,
			jetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			jetAllColumns,
			jetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert jets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(jetPrimaryKeyColumns))
			copy(conflict, jetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"jets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(jetType, jetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jetType, jetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert jets")
	}

	if !cached {
		jetUpsertCacheMut.Lock()
		jetUpsertCache[key] = cache
		jetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Jet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Jet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Jet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jetPrimaryKeyMapping)
	sql := "DELETE FROM \"jets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from jets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for jets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no jetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for jets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"jets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for jets")
	}

	if len(jetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Jet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"jets\".* FROM \"jets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JetSlice")
	}

	*o = slice

	return nil
}

// JetExists checks if the Jet row exists.
func JetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"jets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if jets exists")
	}

	return exists, nil
}
