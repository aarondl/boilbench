// Code generated by SQLBoiler 4.2.0 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
)

// License is an object representing the database table.
type License struct {
	ID      int      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PilotID null.Int `db:"pilot_id" boil:"pilot_id" json:"pilot_id,omitempty" toml:"pilot_id" yaml:"pilot_id,omitempty"`

	R *licenseR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L licenseL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LicenseColumns = struct {
	ID      string
	PilotID string
}{
	ID:      "id",
	PilotID: "pilot_id",
}

// Generated where

var LicenseWhere = struct {
	ID      whereHelperint
	PilotID whereHelpernull_Int
}{
	ID:      whereHelperint{field: "\"licenses\".\"id\""},
	PilotID: whereHelpernull_Int{field: "\"licenses\".\"pilot_id\""},
}

// LicenseRels is where relationship names are stored.
var LicenseRels = struct {
	Pilot string
}{
	Pilot: "Pilot",
}

// licenseR is where relationships are stored.
type licenseR struct {
	Pilot *Pilot `db:"Pilot" boil:"Pilot" json:"Pilot" toml:"Pilot" yaml:"Pilot"`
}

// NewStruct creates a new relationship struct
func (*licenseR) NewStruct() *licenseR {
	return &licenseR{}
}

// licenseL is where Load methods for each relationship are stored.
type licenseL struct{}

var (
	licenseAllColumns            = []string{"id", "pilot_id"}
	licenseColumnsWithoutDefault = []string{"pilot_id"}
	licenseColumnsWithDefault    = []string{"id"}
	licensePrimaryKeyColumns     = []string{"id"}
)

type (
	// LicenseSlice is an alias for a slice of pointers to License.
	// This should generally be used opposed to []License.
	LicenseSlice []*License
	// LicenseHook is the signature for custom License hook methods
	LicenseHook func(context.Context, boil.ContextExecutor, *License) error

	licenseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	licenseType                 = reflect.TypeOf(&License{})
	licenseMapping              = queries.MakeStructMapping(licenseType)
	licensePrimaryKeyMapping, _ = queries.BindMapping(licenseType, licenseMapping, licensePrimaryKeyColumns)
	licenseInsertCacheMut       sync.RWMutex
	licenseInsertCache          = make(map[string]insertCache)
	licenseUpdateCacheMut       sync.RWMutex
	licenseUpdateCache          = make(map[string]updateCache)
	licenseUpsertCacheMut       sync.RWMutex
	licenseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var licenseBeforeInsertHooks []LicenseHook
var licenseBeforeUpdateHooks []LicenseHook
var licenseBeforeDeleteHooks []LicenseHook
var licenseBeforeUpsertHooks []LicenseHook

var licenseAfterInsertHooks []LicenseHook
var licenseAfterSelectHooks []LicenseHook
var licenseAfterUpdateHooks []LicenseHook
var licenseAfterDeleteHooks []LicenseHook
var licenseAfterUpsertHooks []LicenseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *License) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *License) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *License) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *License) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *License) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *License) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *License) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *License) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *License) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range licenseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLicenseHook registers your hook function for all future operations.
func AddLicenseHook(hookPoint boil.HookPoint, licenseHook LicenseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		licenseBeforeInsertHooks = append(licenseBeforeInsertHooks, licenseHook)
	case boil.BeforeUpdateHook:
		licenseBeforeUpdateHooks = append(licenseBeforeUpdateHooks, licenseHook)
	case boil.BeforeDeleteHook:
		licenseBeforeDeleteHooks = append(licenseBeforeDeleteHooks, licenseHook)
	case boil.BeforeUpsertHook:
		licenseBeforeUpsertHooks = append(licenseBeforeUpsertHooks, licenseHook)
	case boil.AfterInsertHook:
		licenseAfterInsertHooks = append(licenseAfterInsertHooks, licenseHook)
	case boil.AfterSelectHook:
		licenseAfterSelectHooks = append(licenseAfterSelectHooks, licenseHook)
	case boil.AfterUpdateHook:
		licenseAfterUpdateHooks = append(licenseAfterUpdateHooks, licenseHook)
	case boil.AfterDeleteHook:
		licenseAfterDeleteHooks = append(licenseAfterDeleteHooks, licenseHook)
	case boil.AfterUpsertHook:
		licenseAfterUpsertHooks = append(licenseAfterUpsertHooks, licenseHook)
	}
}

// One returns a single license record from the query.
func (q licenseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*License, error) {
	o := &License{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for licenses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all License records from the query.
func (q licenseQuery) All(ctx context.Context, exec boil.ContextExecutor) (LicenseSlice, error) {
	var o []*License

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to License slice")
	}

	if len(licenseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all License records in the query.
func (q licenseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count licenses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q licenseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if licenses exists")
	}

	return count > 0, nil
}

// Pilot pointed to by the foreign key.
func (o *License) Pilot(mods ...qm.QueryMod) pilotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PilotID),
	}

	queryMods = append(queryMods, mods...)

	query := Pilots(queryMods...)
	queries.SetFrom(query.Query, "\"pilots\"")

	return query
}

// LoadPilot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (licenseL) LoadPilot(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLicense interface{}, mods queries.Applicator) error {
	var slice []*License
	var object *License

	if singular {
		object = maybeLicense.(*License)
	} else {
		slice = *maybeLicense.(*[]*License)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &licenseR{}
		}
		if !queries.IsNil(object.PilotID) {
			args = append(args, object.PilotID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &licenseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PilotID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PilotID) {
				args = append(args, obj.PilotID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pilots`),
		qm.WhereIn(`pilots.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pilot")
	}

	var resultSlice []*Pilot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pilot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pilots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pilots")
	}

	if len(licenseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pilot = foreign
		if foreign.R == nil {
			foreign.R = &pilotR{}
		}
		foreign.R.Licenses = append(foreign.R.Licenses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PilotID, foreign.ID) {
				local.R.Pilot = foreign
				if foreign.R == nil {
					foreign.R = &pilotR{}
				}
				foreign.R.Licenses = append(foreign.R.Licenses, local)
				break
			}
		}
	}

	return nil
}

// SetPilot of the license to the related item.
// Sets o.R.Pilot to related.
// Adds o to related.R.Licenses.
func (o *License) SetPilot(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pilot) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"licenses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pilot_id"}),
		strmangle.WhereClause("\"", "\"", 2, licensePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PilotID, related.ID)
	if o.R == nil {
		o.R = &licenseR{
			Pilot: related,
		}
	} else {
		o.R.Pilot = related
	}

	if related.R == nil {
		related.R = &pilotR{
			Licenses: LicenseSlice{o},
		}
	} else {
		related.R.Licenses = append(related.R.Licenses, o)
	}

	return nil
}

// RemovePilot relationship.
// Sets o.R.Pilot to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *License) RemovePilot(ctx context.Context, exec boil.ContextExecutor, related *Pilot) error {
	var err error

	queries.SetScanner(&o.PilotID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("pilot_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Pilot = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Licenses {
		if queries.Equal(o.PilotID, ri.PilotID) {
			continue
		}

		ln := len(related.R.Licenses)
		if ln > 1 && i < ln-1 {
			related.R.Licenses[i] = related.R.Licenses[ln-1]
		}
		related.R.Licenses = related.R.Licenses[:ln-1]
		break
	}
	return nil
}

// Licenses retrieves all the records using an executor.
func Licenses(mods ...qm.QueryMod) licenseQuery {
	mods = append(mods, qm.From("\"licenses\""))
	return licenseQuery{NewQuery(mods...)}
}

// FindLicense retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLicense(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*License, error) {
	licenseObj := &License{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"licenses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, licenseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from licenses")
	}

	return licenseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *License) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no licenses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(licenseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	licenseInsertCacheMut.RLock()
	cache, cached := licenseInsertCache[key]
	licenseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			licenseAllColumns,
			licenseColumnsWithDefault,
			licenseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(licenseType, licenseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(licenseType, licenseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"licenses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"licenses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into licenses")
	}

	if !cached {
		licenseInsertCacheMut.Lock()
		licenseInsertCache[key] = cache
		licenseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the License.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *License) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	licenseUpdateCacheMut.RLock()
	cache, cached := licenseUpdateCache[key]
	licenseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			licenseAllColumns,
			licensePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update licenses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"licenses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, licensePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(licenseType, licenseMapping, append(wl, licensePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update licenses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for licenses")
	}

	if !cached {
		licenseUpdateCacheMut.Lock()
		licenseUpdateCache[key] = cache
		licenseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q licenseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for licenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for licenses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LicenseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), licensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"licenses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, licensePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in license slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all license")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *License) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no licenses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(licenseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	licenseUpsertCacheMut.RLock()
	cache, cached := licenseUpsertCache[key]
	licenseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			licenseAllColumns,
			licenseColumnsWithDefault,
			licenseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			licenseAllColumns,
			licensePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert licenses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(licensePrimaryKeyColumns))
			copy(conflict, licensePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"licenses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(licenseType, licenseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(licenseType, licenseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert licenses")
	}

	if !cached {
		licenseUpsertCacheMut.Lock()
		licenseUpsertCache[key] = cache
		licenseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single License record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *License) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no License provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), licensePrimaryKeyMapping)
	sql := "DELETE FROM \"licenses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from licenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for licenses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q licenseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no licenseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from licenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for licenses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LicenseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(licenseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), licensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"licenses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, licensePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from license slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for licenses")
	}

	if len(licenseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *License) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLicense(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LicenseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LicenseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), licensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"licenses\".* FROM \"licenses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, licensePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LicenseSlice")
	}

	*o = slice

	return nil
}

// LicenseExists checks if the License row exists.
func LicenseExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"licenses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if licenses exists")
	}

	return exists, nil
}
