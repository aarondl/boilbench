// Code generated by gola 0.0.6; DO NOT EDIT.

package jets

import (
	"database/sql"
	"encoding/json"
	"reflect"
	"strings"

	"github.com/olachat/gola/coredb"
)

const DBName string = "xianshi"
const TableName string = "jets"

// Jet represents `jets` table
type Jet struct {
	//  int
	Id `json:"id"`
	//  int
	PilotId `json:"pilot_id"`
	//  int
	AirportId `json:"airport_id"`
	//  varchar
	Name `json:"name"`
	//  varchar
	Color `json:"color"`
	//  varchar
	Uuid `json:"uuid"`
	//  varchar
	Identifier `json:"identifier"`
	//  varbinary
	Cargo `json:"cargo"`
	//  varbinary
	Manifest `json:"manifest"`
}

type withPK interface {
	GetId() int
}

// FetchByPK returns a row from `jets` table with given primary key value
func FetchByPK(val int) *Jet {
	return coredb.FetchByPK[Jet](DBName, TableName, []string{"id"}, val)
}

// FetchFieldsByPK returns a row with selected fields from jets table with given primary key value
func FetchFieldsByPK[T any](val int) *T {
	return coredb.FetchByPK[T](DBName, TableName, []string{"id"}, val)
}

// FetchByPKs returns rows with from `jets` table with given primary key values
func FetchByPKs(vals ...int) []*Jet {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKs[Jet](DBName, TableName, "id", pks)
}

// FetchFieldsByPKs returns rows with selected fields from `jets` table with given primary key values
func FetchFieldsByPKs[T any](vals ...int) []*T {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKs[T](DBName, TableName, "id", pks)
}

// FindOne returns a row from `jets` table with arbitary where query
// whereSQL must start with "where ..."
func FindOne(whereSQL string, params ...any) *Jet {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOne[Jet](DBName, TableName, w)
}

// FindOneFields returns a row with selected fields from `jets` table with arbitary where query
// whereSQL must start with "where ..."
func FindOneFields[T any](whereSQL string, params ...any) *T {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOne[T](DBName, TableName, w)
}

// Find returns rows from `jets` table with arbitary where query
// whereSQL must start with "where ..."
func Find(whereSQL string, params ...any) ([]*Jet, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.Find[Jet](DBName, TableName, w)
}

// FindFields returns rows with selected fields from `jets` table with arbitary where query
// whereSQL must start with "where ..."
func FindFields[T any](whereSQL string, params ...any) ([]*T, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.Find[T](DBName, TableName, w)
}

// Count returns select count(*) with arbitary where query
// whereSQL must start with "where ..."
func Count(whereSQL string, params ...any) (int, error) {
	return coredb.QueryInt(DBName, "SELECT COUNT(*) FROM `jets` "+whereSQL, params...)
}

// Column types

// Id field
//
type Id struct {
	isAssigned bool
	val        int
}

func (c *Id) GetId() int {
	return c.val
}

func (c *Id) GetColumnName() string {
	return "id"
}

func (c *Id) GetValPointer() any {
	return &c.val
}

func (c *Id) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Id) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// PilotId field
//
type PilotId struct {
	_updated bool
	val      int
}

func (c *PilotId) GetPilotId() int {
	return c.val
}

func (c *PilotId) SetPilotId(val int) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *PilotId) IsUpdated() bool {
	return c._updated
}

func (c *PilotId) resetUpdated() {
	c._updated = false
}

func (c *PilotId) GetColumnName() string {
	return "pilot_id"
}

func (c *PilotId) GetValPointer() any {
	return &c.val
}

func (c *PilotId) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *PilotId) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// AirportId field
//
type AirportId struct {
	_updated bool
	val      int
}

func (c *AirportId) GetAirportId() int {
	return c.val
}

func (c *AirportId) SetAirportId(val int) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *AirportId) IsUpdated() bool {
	return c._updated
}

func (c *AirportId) resetUpdated() {
	c._updated = false
}

func (c *AirportId) GetColumnName() string {
	return "airport_id"
}

func (c *AirportId) GetValPointer() any {
	return &c.val
}

func (c *AirportId) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *AirportId) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Name field
//
type Name struct {
	_updated bool
	val      string
}

func (c *Name) GetName() string {
	return c.val
}

func (c *Name) SetName(val string) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *Name) IsUpdated() bool {
	return c._updated
}

func (c *Name) resetUpdated() {
	c._updated = false
}

func (c *Name) GetColumnName() string {
	return "name"
}

func (c *Name) GetValPointer() any {
	return &c.val
}

func (c *Name) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Name) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Color field
//
type Color struct {
	_updated bool
	val      string
}

func (c *Color) GetColor() string {
	return c.val
}

func (c *Color) SetColor(val string) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *Color) IsUpdated() bool {
	return c._updated
}

func (c *Color) resetUpdated() {
	c._updated = false
}

func (c *Color) GetColumnName() string {
	return "color"
}

func (c *Color) GetValPointer() any {
	return &c.val
}

func (c *Color) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Color) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Uuid field
//
type Uuid struct {
	_updated bool
	val      string
}

func (c *Uuid) GetUuid() string {
	return c.val
}

func (c *Uuid) SetUuid(val string) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *Uuid) IsUpdated() bool {
	return c._updated
}

func (c *Uuid) resetUpdated() {
	c._updated = false
}

func (c *Uuid) GetColumnName() string {
	return "uuid"
}

func (c *Uuid) GetValPointer() any {
	return &c.val
}

func (c *Uuid) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Uuid) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Identifier field
//
type Identifier struct {
	_updated bool
	val      string
}

func (c *Identifier) GetIdentifier() string {
	return c.val
}

func (c *Identifier) SetIdentifier(val string) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *Identifier) IsUpdated() bool {
	return c._updated
}

func (c *Identifier) resetUpdated() {
	c._updated = false
}

func (c *Identifier) GetColumnName() string {
	return "identifier"
}

func (c *Identifier) GetValPointer() any {
	return &c.val
}

func (c *Identifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Identifier) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Cargo field
//
type Cargo struct {
	_updated bool
	val      []byte
}

func (c *Cargo) GetCargo() []byte {
	return c.val
}

func (c *Cargo) SetCargo(val []byte) bool {
	c._updated = true
	c.val = val
	return true
}

func (c *Cargo) IsUpdated() bool {
	return c._updated
}

func (c *Cargo) resetUpdated() {
	c._updated = false
}

func (c *Cargo) GetColumnName() string {
	return "cargo"
}

func (c *Cargo) GetValPointer() any {
	return &c.val
}

func (c *Cargo) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Cargo) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Manifest field
//
type Manifest struct {
	_updated bool
	val      []byte
}

func (c *Manifest) GetManifest() []byte {
	return c.val
}

func (c *Manifest) SetManifest(val []byte) bool {
	c._updated = true
	c.val = val
	return true
}

func (c *Manifest) IsUpdated() bool {
	return c._updated
}

func (c *Manifest) resetUpdated() {
	c._updated = false
}

func (c *Manifest) GetColumnName() string {
	return "manifest"
}

func (c *Manifest) GetValPointer() any {
	return &c.val
}

func (c *Manifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Manifest) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// New return new *Jet with default values
func New() *Jet {
	return &Jet{
		Id{},
		PilotId{},
		AirportId{},
		Name{},
		Color{},
		Uuid{},
		Identifier{},
		Cargo{},
		Manifest{},
	}
}

// NewWithPK takes "id"
// and returns new *Jet with given PK
func NewWithPK(val int) *Jet {
	c := &Jet{
		Id{},
		PilotId{},
		AirportId{},
		Name{},
		Color{},
		Uuid{},
		Identifier{},
		Cargo{},
		Manifest{},
	}
	c.Id.val = val
	c.Id.isAssigned = true
	return c
}

const insertWithoutPK string = "INSERT IGNORE INTO `jets` (`pilot_id`, `airport_id`, `name`, `color`, `uuid`, `identifier`, `cargo`, `manifest`) values (?, ?, ?, ?, ?, ?, ?, ?)"
const insertWithPK string = "INSERT IGNORE INTO `jets` (`id`, `pilot_id`, `airport_id`, `name`, `color`, `uuid`, `identifier`, `cargo`, `manifest`) values (?, ?, ?, ?, ?, ?, ?, ?, ?)"

// Insert Jet struct to `jets` table
func (c *Jet) Insert() error {
	var result sql.Result
	var err error
	if c.Id.isAssigned {
		result, err = coredb.Exec(DBName, insertWithPK, c.GetId(), c.GetPilotId(), c.GetAirportId(), c.GetName(), c.GetColor(), c.GetUuid(), c.GetIdentifier(), c.GetCargo(), c.GetManifest())
		if err != nil {
			return err
		}
	} else {
		result, err = coredb.Exec(DBName, insertWithoutPK, c.GetPilotId(), c.GetAirportId(), c.GetName(), c.GetColor(), c.GetUuid(), c.GetIdentifier(), c.GetCargo(), c.GetManifest())
		if err != nil {
			return err
		}

		id, err := result.LastInsertId()
		if err != nil {
			return err
		}
		c.Id.val = int(id)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if affectedRows == 0 {
		return coredb.ErrAvoidInsert
	}

	c.resetUpdated()
	return nil
}

func (c *Jet) resetUpdated() {
	c.PilotId.resetUpdated()
	c.AirportId.resetUpdated()
	c.Name.resetUpdated()
	c.Color.resetUpdated()
	c.Uuid.resetUpdated()
	c.Identifier.resetUpdated()
	c.Cargo.resetUpdated()
	c.Manifest.resetUpdated()
}

// Update Jet struct in `jets` table
func (obj *Jet) Update() (bool, error) {
	var updatedFields []string
	var params []any
	if obj.PilotId.IsUpdated() {
		updatedFields = append(updatedFields, "`pilot_id` = ?")
		params = append(params, obj.GetPilotId())
	}
	if obj.AirportId.IsUpdated() {
		updatedFields = append(updatedFields, "`airport_id` = ?")
		params = append(params, obj.GetAirportId())
	}
	if obj.Name.IsUpdated() {
		updatedFields = append(updatedFields, "`name` = ?")
		params = append(params, obj.GetName())
	}
	if obj.Color.IsUpdated() {
		updatedFields = append(updatedFields, "`color` = ?")
		params = append(params, obj.GetColor())
	}
	if obj.Uuid.IsUpdated() {
		updatedFields = append(updatedFields, "`uuid` = ?")
		params = append(params, obj.GetUuid())
	}
	if obj.Identifier.IsUpdated() {
		updatedFields = append(updatedFields, "`identifier` = ?")
		params = append(params, obj.GetIdentifier())
	}
	if obj.Cargo.IsUpdated() {
		updatedFields = append(updatedFields, "`cargo` = ?")
		params = append(params, obj.GetCargo())
	}
	if obj.Manifest.IsUpdated() {
		updatedFields = append(updatedFields, "`manifest` = ?")
		params = append(params, obj.GetManifest())
	}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `jets` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE `id` = ?"
	params = append(params, obj.GetId())

	result, err := coredb.Exec(DBName, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	obj.resetUpdated()
	return true, nil
}

// Update Jet struct with given fields in `jets` table
func Update(obj withPK) (bool, error) {
	var updatedFields []string
	var params []any
	var resetFuncs []func()

	val := reflect.ValueOf(obj).Elem()
	updatedFields = make([]string, 0, val.NumField())
	params = make([]any, 0, val.NumField())

	for i := 0; i < val.NumField(); i++ {
		col := val.Field(i).Addr().Interface()

		switch c := col.(type) {
		case *PilotId:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`pilot_id` = ?")
				params = append(params, c.GetPilotId())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *AirportId:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`airport_id` = ?")
				params = append(params, c.GetAirportId())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *Name:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`name` = ?")
				params = append(params, c.GetName())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *Color:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`color` = ?")
				params = append(params, c.GetColor())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *Uuid:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`uuid` = ?")
				params = append(params, c.GetUuid())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *Identifier:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`identifier` = ?")
				params = append(params, c.GetIdentifier())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *Cargo:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`cargo` = ?")
				params = append(params, c.GetCargo())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *Manifest:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`manifest` = ?")
				params = append(params, c.GetManifest())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		}
	}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `jets` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE `id` = ?"
	params = append(params, obj.GetId())

	result, err := coredb.Exec(DBName, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	for _, f := range resetFuncs {
		f()
	}
	return true, nil
}

const deleteSql string = "DELETE FROM `jets` WHERE `id` = ?"

// DeleteByPK delete a row from jets table with given primary key value
func DeleteByPK(val int) error {
	_, err := coredb.Exec(DBName, deleteSql, val)
	return err
}
